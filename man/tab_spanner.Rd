% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tab_create_modify.R
\name{tab_spanner}
\alias{tab_spanner}
\title{Add a spanner column label}
\usage{
tab_spanner(
  data,
  label,
  columns = NULL,
  spanners = NULL,
  level = NULL,
  id = label,
  gather = TRUE,
  replace = FALSE
)
}
\arguments{
\item{data}{A table object that is created using the \code{\link[=gt]{gt()}} function.}

\item{label}{The text to use for the spanner column label.}

\item{columns}{The columns to be components of the spanner heading.}

\item{spanners}{The spanners that should be spanned over, should they already
be defined.}

\item{level}{An explicit level to which the spanner should be placed. If not
provided, \strong{gt} will choose the level based on the inputs provided within
\code{columns} and \code{spanners}, placing the spanner label where it will fit. The
first spanner level (right above the column labels) is \code{1}.}

\item{id}{The ID for the spanner column label. When accessing a spanner
column label through \code{\link[=cells_column_spanners]{cells_column_spanners()}} (when using \code{\link[=tab_style]{tab_style()}} or
\code{\link[=tab_footnote]{tab_footnote()}}) the \code{id} value is used as the reference (and not the
\code{label}). If an \code{id} is not explicitly provided here, it will be taken from
the \code{label} value. It is advisable to set an explicit \code{id} value if you
plan to access this cell in a later function call and the label text is
complicated (e.g., contains markup, is lengthy, or both). Finally, when
providing an \code{id} value you must ensure that it is unique across all ID
values set for column spanner labels (the function will stop if \code{id} isn't
unique).}

\item{gather}{An option to move the specified \code{columns} such that they are
unified under the spanner column label. Ordering of the moved-into-place
columns will be preserved in all cases. By default, this is set to \code{TRUE}.}

\item{replace}{Should new spanners be allowed to partially or fully replace
existing spanners? (This is a possibility if setting spanners at an already
populated \code{level}.) By default, this is set to \code{FALSE} and an error will
occur if some replacement is attempted.}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
Set a spanner column label by mapping it to columns already in the table.
This label is placed above one or more column labels, spanning the width of
those columns and column labels.
}
\section{Examples}{


Let's create a \strong{gt} table using a small portion of the \code{\link{gtcars}} dataset.
Over several columns (\code{hp}, \code{hp_rpm}, \code{trq}, \code{trq_rpm}, \code{mpg_c}, \code{mpg_h})
we'll use \code{tab_spanner()} to add a spanner with the label \code{"performance"}.
This effectively groups together several columns related to car performance
under a unifying label.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gtcars |>
  dplyr::select(
    -mfr, -trim, bdy_style,
    -drivetrain, -trsmn, -ctry_origin
  ) |>
  dplyr::slice(1:8) |>
  gt(rowname_col = "model") |>
  tab_spanner(
    label = "performance",
    columns = c(
      hp, hp_rpm, trq, trq_rpm, mpg_c, mpg_h
    )
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_1.png" alt="This image of a table was generated from the first code example in the `tab_spanner()` help file." style="width:100\%;">
}}

With the default \code{gather = TRUE} option, columns selected for a particular
spanner will be moved so that there is no separation between them. This can
be seen with the example below that uses a subset of the \code{\link{towny}} dataset.
The starting column order is \code{name}, \code{latitude}, \code{longitude},
\code{population_2016}, \code{density_2016}, \code{population_2021}, and \code{density_2021}. The
first two uses of \code{tab_spanner()} deal with making separate spanners for the
two population and two density columns. After their use, the columns are
moved to this new ordering: \code{name}, \code{latitude}, \code{longitude},
\code{population_2016}, \code{population_2021}, \code{density_2016}, and \code{density_2021}. The
third and final call of \code{tab_spanner()} doesn't further affect the ordering
of columns.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{towny |>
  dplyr::arrange(desc(population_2021)) |>
  dplyr::slice_head(n = 5) |>
  dplyr::select(
    name, latitude, longitude,
    ends_with("2016"), ends_with("2021")
  ) |>
  gt() |>
  tab_spanner(
    columns = starts_with("pop"),
    label = "Population"
  ) |>
  tab_spanner(
    columns = starts_with("den"),
    label = "Density"
  ) |>
  tab_spanner(
    columns = ends_with("itude"),
    label = md("*Location*"),
    id = "loc"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_2.png" alt="This image of a table was generated from the second code example in the `tab_spanner()` help file." style="width:100\%;">
}}

While columns are moved, it is only the minimal amount of moving required
(pulling in columns from the right) to ensure that columns are gathered under
the appropriate spanners. With the last call, there are two more things to
note: (1) \code{label} values can use the \code{\link[=md]{md()}} (or \code{\link[=html]{html()}}) helper functions to
help create styled text, and (2) an \code{id} value may be supplied for reference
later (e.g., for styling with \code{\link[=tab_style]{tab_style()}} or applying footnotes with
\code{\link[=tab_footnote]{tab_footnote()}}).

It's possible to stack multiple spanners atop each other with consecutive
calls of \code{tab_spanner()}. It's a bit like playing Tetris: putting a spanner
down anywhere there is another spanner (i.e., there are one or more shared
columns) means that second spanner will reside a level above prior. Let's
look at a few examples at how this works, and we'll also explore a few
lesser-known placement tricks. Let's use a cut down version of \code{\link{exibble}}
for this, set up a few level-one spanners, and then place a level two spanner
over two other spanners.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble_narrow <- exibble |> dplyr::slice_head(n = 3)

exibble_narrow |>
  gt() |>
  tab_spanner(
    label = "Row Information",
    columns = c(row, group)
  ) |>
  tab_spanner(
    label = "Numeric Values",
    columns = where(is.numeric),
    id = "num_spanner"
  ) |>
  tab_spanner(
    label = "Text Values",
    columns = c(char, fctr),
    id = "text_spanner"
  ) |>
  tab_spanner(
    label = "Numbers and Text",
    spanners = c("num_spanner", "text_spanner")
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_3.png" alt="This image of a table was generated from the third code example in the `tab_spanner()` help file." style="width:100\%;">
}}

In the above example, we used the \code{spanners} argument to define where the
\code{"Numbers and Text"}-labeled spanner should reside. For that, we supplied the
\code{"num_spanner"} and \code{"text_spanner"} ID values for the two spanners
associated with the \code{num}, \code{currency}, \code{char}, and \code{fctr} columns.
Alternatively, we could have given those column names to the \code{columns}
argument and achieved the same result. You could actually use a combination
of \code{spanners} and \code{columns} to define where the spanner should be placed.
Here is an example of just that:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble_narrow_gt <-
  exibble_narrow |>
  gt() |>
  tab_spanner(
    label = "Numeric Values",
    columns = where(is.numeric),
    id = "num_spanner"
  ) |>
  tab_spanner(
    label = "Text Values",
    columns = c(char, fctr),
    id = "text_spanner"
  ) |>
  tab_spanner(
    label = "Text, Dates, Times, Datetimes",
    columns = contains(c("date", "time")),
    spanners = "text_spanner"
  )

exibble_narrow_gt
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_4.png" alt="This image of a table was generated from the fourth code example in the `tab_spanner()` help file." style="width:100\%;">
}}

And, again, we could have solely supplied all of the column names to
\code{columns} instead of using this hybrid approach, but it is interesting to
express the definition of spanners with this flexible combination.

What if you wanted to extend the above example and place a spanner above the
\code{date}, \code{time}, and \code{datetime} columns? If you tried that in the manner as
exemplified above, the spanner will be placed in the third level of spanners:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble_narrow_gt |>
  tab_spanner(
    label = "Date and Time Columns",
    columns = contains(c("date", "time")),
    id = "date_time_spanner"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_5.png" alt="This image of a table was generated from the fifth code example in the `tab_spanner()` help file." style="width:100\%;">
}}

Remember that the approach taken by \code{tab_spanner()} is to keep stacking atop
existing spanners. But, there is space next to the \code{"Text Values"} spanner on
the first level. You can either revise the order of \code{tab_spanner()} calls,
or, use the \code{level} argument to force the spanner into that level (so long
as there is space).

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble_narrow_gt |>
  tab_spanner(
    label = "Date and Time Columns",
    columns = contains(c("date", "time")),
    level = 1,
    id = "date_time_spanner"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_tab_spanner_6.png" alt="This image of a table was generated from the sixth code example in the `tab_spanner()` help file." style="width:100\%;">
}}

That puts the spanner in the intended level. If there aren't free locations
available in the \code{level} specified you'll get an error stating which columns
cannot be used for the new spanner (this can be circumvented, if necessary,
with the \code{replace = TRUE} option). If you choose a level higher than the
maximum occupied, then the spanner will be dropped down. Again, these
behaviors are indicative of Tetris-like rules though they tend to work well
for the application of spanners.
}

\section{Function ID}{

2-2
}

\section{Function Introduced}{

\code{v0.2.0.5} (March 31, 2020)
}

\seealso{
Other part creation/modification functions: 
\code{\link{tab_caption}()},
\code{\link{tab_footnote}()},
\code{\link{tab_header}()},
\code{\link{tab_info}()},
\code{\link{tab_options}()},
\code{\link{tab_row_group}()},
\code{\link{tab_source_note}()},
\code{\link{tab_spanner_delim}()},
\code{\link{tab_stub_indent}()},
\code{\link{tab_stubhead}()},
\code{\link{tab_style_body}()},
\code{\link{tab_style}()}
}
\concept{part creation/modification functions}
