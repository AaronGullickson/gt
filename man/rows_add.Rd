% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rows_add.R
\name{rows_add}
\alias{rows_add}
\title{Add one or more rows to a \strong{gt} table}
\usage{
rows_add(
  .data,
  ...,
  .list = list2(...),
  .before = NULL,
  .after = NULL,
  .n_empty = NULL
)
}
\arguments{
\item{.data}{A table object that is created using the \code{\link[=gt]{gt()}} function.}

\item{...}{Expressions for the assignment of cell values to the new rows
by column name in \code{.data}. Name-value pairs, in the form of
\verb{<column> = <value vector>} will work, so long as the \verb{<column>} value
exists in the table. Two-sided formulas with column-resolving expressions
(e.g, \verb{<expr> ~ <value vector>}) can also be used, where the left-hand side
corresponds to selections of columns. The length of the longest vector in
\verb{<value vector>} determines how many new rows will be added. Single values
in \verb{<value vector>} will be repeated down in cases where there are multiple
rows to be added.}

\item{.list}{Allows for the use of a list as an input alternative to \code{...}.}

\item{.before, .after}{A single row-resolving expression or row index can be
given to either \code{.before} or \code{.after}. This specifies where the new rows
should be positioned among the existing rows in the input data table. If
nothing is provided for either argument the new rows will be placed at the
bottom.}

\item{.n_empty}{An option to add empty rows in lieu of rows containing data
that would otherwise be supplied to \code{...} or \code{.list}. If the option is
taken, provide an integer value here.}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
It's possible to add new rows to your table with \code{rows_add()} by supplying
the new row data through name value pairs.
}
\section{Examples}{


Let's make a simple \strong{gt} table with the \code{\link{exibble}} dataset, using the
\code{row} column for labels in the stub. We'll add a single row to the bottom of
the table with \code{rows_add()}. With name-value pairs, it's possible to add
values for the body cells corresponding to columns available in the table.
For any columns that are missed, the corresponding body cells receive \code{NA}
values.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble |>
  gt(rowname_col = "row") |>
  rows_add(
    row = "row_9",
    num = 9.999E7,
    char = "ilama",
    fctr = "nine",
    group = "grp_b"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_rows_add_1.png" alt="This image of a table was generated from the first code example in the `rows_add()` help file." style="width:100\%;">
}}

If you wanted to place a row somewhere in the middle of the table, we can use
either of the \code{.before} or \code{.after} arguments in \code{rows_add()}:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble |>
  gt(rowname_col = "row") |>
  rows_add(
    row = "row_4.5",
    num = 9.923E3,
    char = "elderberry",
    fctr = "eighty",
    group = "grp_a",
    .after = "row_4"
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_rows_add_2.png" alt="This image of a table was generated from the second code example in the `rows_add()` help file." style="width:100\%;">
}}

Putting a row at the beginning requires the use of the \code{.before} argument. We
can use an index value for the row as in \code{.before = 1} for maximum easiness:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble |>
  gt(rowname_col = "row") |>
  rows_add(
    row = "row_0",
    num = 0,
    char = "apple",
    fctr = "zero",
    group = "grp_a",
    .before = 1
  )
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_rows_add_3.png" alt="This image of a table was generated from the third code example in the `rows_add()` help file." style="width:100\%;">
}}

Again with \code{\link{exibble}}, we can create an example where we insert 'spacer'
rows. These are rows without any content and merely serve to add extra
rowwise space to the table. In this case, we'll have a stub with row names
and row groups (set up in the \code{\link[=gt]{gt()}} call). The two rows being added will
occupy the bottom row of each group. The only data defined for the two rows
involves values for the \code{row} and \code{group} columns. It's important that the
data for \code{group} uses the group names already present in the data (\code{"grp_a"}
and \code{"grp_b"}). The corresponding values for \code{row} will be \code{"row_a_end"} and
\code{"row_b_end"}, these will be used later expressions for targeting the rows.
Here's the code needed to generate spacer rows at the end of each row group:

\if{html}{\out{<div class="sourceCode r">}}\preformatted{exibble |>
  gt(rowname_col = "row", groupname_col = "group") |>
  rows_add(
    row = c("row_a_end", "row_b_end"),
    group = c("grp_a", "grp_b")
  ) |>
  tab_style(
    style = cell_borders(sides = "top", style = "hidden"),
    locations = list(
      cells_body(rows = ends_with("end")),
      cells_stub(rows = ends_with("end"))
    )
  ) |>
  sub_missing(missing_text = "") |>
  text_case_when(
    grepl("end", x) ~ "",
    .locations = cells_stub()
  ) |>
  opt_vertical_padding(scale = 0.5)
}\if{html}{\out{</div>}}

All missing values are substituted with an empty string (\code{""}) using the
\code{\link[=sub_missing]{sub_missing()}} function. We removed the top border of the new rows with a
call to \code{\link[=tab_style]{tab_style()}}, targeting those rows where the row labels end with
\code{"end"}. Finally, we get rid of the row labels with the use of the
\code{\link[=text_case_when]{text_case_when()}} function, using a similar strategy of targeting the name
of the row label.

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_rows_add_4.png" alt="This image of a table was generated from the fourth code example in the `rows_add()` help file." style="width:100\%;">
}}
}

\section{Function ID}{

6-4
}

\section{Function Introduced}{

\verb{0.9.1} (in development)
}

\seealso{
Other row addition/modification functions: 
\code{\link{grand_summary_rows}()},
\code{\link{row_group_order}()},
\code{\link{summary_rows}()}
}
\concept{row addition/modification functions}
