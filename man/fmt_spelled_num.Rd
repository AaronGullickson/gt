% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/format_data.R
\name{fmt_spelled_num}
\alias{fmt_spelled_num}
\title{Format values to spelled-out numbers}
\usage{
fmt_spelled_num(
  data,
  columns = everything(),
  rows = everything(),
  pattern = "{x}",
  locale = NULL
)
}
\arguments{
\item{data}{A table object that is created using the \code{\link[=gt]{gt()}} function.}

\item{columns}{The columns to format. Can either be a series of column names
provided in \code{\link[=c]{c()}}, a vector of column indices, or a helper function
focused on selections. The select helper functions are: \code{\link[=starts_with]{starts_with()}},
\code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}}, \code{\link[=one_of]{one_of()}}, \code{\link[=num_range]{num_range()}}, and
\code{\link[=everything]{everything()}}.}

\item{rows}{Optional rows to format. Providing \code{\link[=everything]{everything()}} (the
default) results in all rows in \code{columns} being formatted. Alternatively,
we can supply a vector of row captions within \code{\link[=c]{c()}}, a vector of row
indices, or a helper function focused on selections. The select helper
functions are: \code{\link[=starts_with]{starts_with()}}, \code{\link[=ends_with]{ends_with()}}, \code{\link[=contains]{contains()}}, \code{\link[=matches]{matches()}},
\code{\link[=one_of]{one_of()}}, \code{\link[=num_range]{num_range()}}, and \code{\link[=everything]{everything()}}. We can also use expressions
to filter down to the rows we need (e.g.,
\verb{[colname_1] > 100 & [colname_2] < 50}).}

\item{pattern}{A formatting pattern that allows for decoration of the
formatted value. The value itself is represented by \code{{x}} and all other
characters are taken to be string literals.}

\item{locale}{An optional locale identifier that can be used for formatting
the value according the locale's rules. Examples include \code{"en"} for English
(United States) and \code{"fr"} for French (France). The use of a locale ID will
override any locale-specific values provided. We can use the
\code{\link[=info_locales]{info_locales()}} function as a useful reference for all of the locales that
are supported.}
}
\value{
An object of class \code{gt_tbl}.
}
\description{
With numeric values in a \strong{gt} table we can transform those to numbers that
are spelled out with the \code{fmt_spelled_num()} function. Any values from \code{0} to
\code{100} can be spelled out so, for example, the value \code{23} will be formatted as
\code{"twenty-three"}. Providing a locale ID will result in the number spelled out
in the locale's language rules. For example, should a Swedish locale (\code{"sv"})
be provided, the input value \code{23} will yield \code{"tjugotre"}. In addition to
this, we can optionally use the \code{pattern} argument for decoration of the
formatted values.
}
\section{Compatibility of formatting function with data values}{


The \code{fmt_spelled_num()} formatting function is compatible with body cells
that are of the \code{"numeric"} or \code{"integer"} types. Any other types of body
cells are ignored during formatting. This is to say that cells of
incompatible data types may be targeted, but there will be no attempt to
format them.
}

\section{Targeting cells with \code{columns} and \code{rows}}{


Targeting of values is done through \code{columns} and additionally by \code{rows} (if
nothing is provided for \code{rows} then entire columns are selected). The
\code{columns} argument allows us to target a subset of cells contained in the
resolved columns. We say resolved because aside from declaring column names
in \code{c()} (with bare column names or names in quotes) we can use
\strong{tidyselect}-style expressions. This can be as basic as supplying a select
helper like \code{starts_with()}, or, providing a more complex incantation like

\code{where(~ is.numeric(.x) && max(.x, na.rm = TRUE) > 1E6)}

which targets numeric columns that have a maximum value greater than
1,000,000 (excluding any \code{NA}s from consideration).

By default all columns and rows are selected (with the \code{everything()}
defaults). Cell values that are incompatible with a given formatting function
will be skipped over, like \code{character} values and numeric \verb{fmt_*()}
functions. So it's safe to select all columns with a particular formatting
function (only those values that can be formatted will be formatted), but,
you may not want that. One strategy is to format the bulk of cell values with
one formatting function and then constrain the columns for later passes with
other types of formatting (the last formatting done to a cell is what you get
in the final output).

Once the columns are targeted, we may also target the \code{rows} within those
columns. This can be done in a variety of ways. If a stub is present, then we
potentially have row identifiers. Those can be used much like column names in
the \code{columns}-targeting scenario. We can use simpler \strong{tidyselect}-style
expressions (the select helpers should work well here) and we can use quoted
row identifiers in \code{c()}. It's also possible to use row indices (e.g.,
\code{c(3, 5, 6)}) though these index values must correspond to the row numbers of
the input data (the indices won't necessarily match those of rearranged rows
if row groups are present). One more type of expression is possible, an
expression that takes column values (can involve any of the available columns
in the table) and returns a logical vector. This is nice if you want to base
formatting on values in the column or another column, or, you'd like to use a
more complex predicate expression.
}

\section{Supported locales}{


The following 80 locales are supported in the \code{locale} argument of
\code{fmt_spelled_num()}: \code{"af"} (Afrikaans), \code{"ak"} (Akan), \code{"am"} (Amharic),
\code{"ar"} (Arabic), \code{"az"} (Azerbaijani), \code{"be"} (Belarusian), \code{"bg"}
(Bulgarian), \code{"bs"} (Bosnian), \code{"ca"} (Catalan), \code{"ccp"} (Chakma), \code{"chr"}
(Cherokee), \code{"cs"} (Czech), \code{"cy"} (Welsh), \code{"da"} (Danish), \code{"de"} (German),
\code{"de-CH"} (German (Switzerland)), \code{"ee"} (Ewe), \code{"el"} (Greek), \code{"en"}
(English), \code{"eo"} (Esperanto), \code{"es"} (Spanish), \code{"et"} (Estonian), \code{"fa"}
(Persian), \code{"ff"} (Fulah), \code{"fi"} (Finnish), \code{"fil"} (Filipino), \code{"fo"}
(Faroese), \code{"fr"} (French), \code{"fr-BE"} (French (Belgium)), \code{"fr-CH"} (French
(Switzerland)), \code{"ga"} (Irish), \code{"he"} (Hebrew), \code{"hi"} (Hindi), \code{"hr"}
(Croatian), \code{"hu"} (Hungarian), \code{"hy"} (Armenian), \code{"id"} (Indonesian),
\code{"is"} (Icelandic), \code{"it"} (Italian), \code{"ja"} (Japanese), \code{"ka"} (Georgian),
\code{"kk"} (Kazakh), \code{"kl"} (Kalaallisut), \code{"km"} (Khmer), \code{"ko"} (Korean),
\code{"ky"} (Kyrgyz), \code{"lb"} (Luxembourgish), \code{"lo"} (Lao), \code{"lrc"} (Northern
Luri), \code{"lt"} (Lithuanian), \code{"lv"} (Latvian), \code{"mk"} (Macedonian), \code{"ms"}
(Malay), \code{"mt"} (Maltese), \code{"my"} (Burmese), \code{"ne"} (Nepali), \code{"nl"} (Dutch),
\code{"nn"} (Norwegian Nynorsk), \code{"no"} (Norwegian), \code{"pl"} (Polish), \code{"pt"}
(Portuguese), \code{"qu"} (Quechua), \code{"ro"} (Romanian), \code{"ru"} (Russian), \code{"se"}
(Northern Sami), \code{"sk"} (Slovak), \code{"sl"} (Slovenian), \code{"sq"} (Albanian),
\code{"sr"} (Serbian), \code{"sr-Latn"} (Serbian (Latin)), \code{"su"} (Sundanese), \code{"sv"}
(Swedish), \code{"sw"} (Swahili), \code{"ta"} (Tamil), \code{"th"} (Thai), \code{"tr"} (Turkish),
\code{"uk"} (Ukrainian), \code{"vi"} (Vietnamese), \code{"yue"} (Cantonese), and \code{"zh"}
(Chinese).
}

\section{Examples}{


Let's use a summarized version of the \code{\link{gtcars}} dataset to create a
\strong{gt} table. The \code{fmt_spelled_num()} function is used to transform
integer values into spelled-out numbering (in the \code{n} column). That formatted
column of numbers-as-words is given cell background colors via \code{\link[=data_color]{data_color()}}
(the underlying numerical values are always available).

\if{html}{\out{<div class="sourceCode r">}}\preformatted{gtcars |>
  dplyr::select(mfr, ctry_origin) |>
  dplyr::group_by(mfr, ctry_origin) |>
  dplyr::count() |>
  dplyr::ungroup() |>
  dplyr::arrange(ctry_origin) |>
  gt(rowname_col = "mfr", groupname_col = "ctry_origin") |>
  cols_label(n = "No. of Entries") |>
  fmt_spelled_num() |>
  tab_stub_indent(rows = everything(), indent = 2) |>
  data_color(
    columns = n,
    method = "numeric",
    palette = "viridis",
    alpha = 0.8
  ) |>
  opt_all_caps() |>
  opt_vertical_padding(scale = 0.5) |>
  cols_align(align = "center", columns = n)
}\if{html}{\out{</div>}}

\if{html}{\out{
<img src="https://raw.githubusercontent.com/rstudio/gt/master/images/man_fmt_spelled_num_1.png" alt="This image of a table was generated from the first code example in the `fmt_spelled_num()` help file." style="width:100\%;">
}}
}

\section{Function ID}{

3-11
}

\section{Function Introduced}{

\code{v0.9.0} (Mar 31, 2023)
}

\seealso{
The vector-formatting version of this function:
\code{\link[=vec_fmt_spelled_num]{vec_fmt_spelled_num()}}.

Other data formatting functions: 
\code{\link{data_color}()},
\code{\link{fmt_auto}()},
\code{\link{fmt_bins}()},
\code{\link{fmt_bytes}()},
\code{\link{fmt_currency}()},
\code{\link{fmt_datetime}()},
\code{\link{fmt_date}()},
\code{\link{fmt_duration}()},
\code{\link{fmt_engineering}()},
\code{\link{fmt_flag}()},
\code{\link{fmt_fraction}()},
\code{\link{fmt_image}()},
\code{\link{fmt_index}()},
\code{\link{fmt_integer}()},
\code{\link{fmt_markdown}()},
\code{\link{fmt_number}()},
\code{\link{fmt_partsper}()},
\code{\link{fmt_passthrough}()},
\code{\link{fmt_percent}()},
\code{\link{fmt_roman}()},
\code{\link{fmt_scientific}()},
\code{\link{fmt_time}()},
\code{\link{fmt_url}()},
\code{\link{fmt}()},
\code{\link{sub_large_vals}()},
\code{\link{sub_missing}()},
\code{\link{sub_small_vals}()},
\code{\link{sub_values}()},
\code{\link{sub_zero}()}
}
\concept{data formatting functions}
